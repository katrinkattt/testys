{"version":3,"sources":["components/btn.jsx","components/modalWindow.jsx","components/container.jsx","App.js","serviceWorker.js","index.js"],"names":["Btn","props","className","href","id","text","ModalWindow","title","Container","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","btn","modal","btnClose","addEventListener","style","display","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0MAGe,SAASA,EAAIC,GAExB,OACI,yBAAKC,UAAU,aACX,uBAAGC,KAAK,IAAID,UAAU,aAGlB,0BAAME,GAAG,WAAWF,UAAU,aAAaD,EAAMI,QCRlD,SAASC,EAAYL,GAChC,OACI,yBAAKG,GAAG,QAAQF,UAAU,eACtB,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,sBAAsBD,EAAMM,OAC3C,yBAAKH,GAAG,WAAWF,UAAU,gBACzB,yBAAKA,UAAU,uBACf,yBAAKA,UAAU,0BAGvB,yBAAKA,UAAU,eAAeD,EAAMI,MACpC,yBAAKH,UAAU,mB,ICTNM,E,iLAGb,OACI,yBAAKJ,GAAG,gBAAgBF,UAAU,mBACtB,yBAAKA,UAAU,iBACX,kBAACF,EAAD,CAAKK,KAAK,WAEd,kBAACC,EAAD,CAAcC,MAAM,eAAeF,KAAM,qiBAJrD,S,GAJ2BI,aCWxBC,MAVf,WACE,OACE,yBAAKR,UAAU,OACb,iCACE,kBAAC,EAAD,SCGYS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SAEjD,IAAMC,EAAMF,SAASC,eAAe,YAC9BE,EAAQH,SAASC,eAAe,SAChCG,EAAWJ,SAASC,eAAe,YACnBD,SAASC,eAAe,iBAE9CC,EAAIG,iBAAiB,SAAS,WAC1BF,EAAMG,MAAMC,QAAQ,WAGxBH,EAASC,iBAAiB,SAAS,WAC/BF,EAAMG,MAAMC,QAAQ,UDiHlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.2416cf99.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\n\r\nexport default function Btn(props){\r\n\r\n    return(\r\n        <div className=\"btn__main\">\r\n            <a href=\"#\" className=\"btn__link\"\r\n\r\n            >\r\n                <span id=\"btnClick\" className=\"text__btn\">{props.text}</span>\r\n            </a>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {Component} from 'react';\r\n\r\nexport default function ModalWindow(props){\r\n    return(\r\n        <div id=\"modal\" className=\"modal__main\">\r\n            <div className=\"modal__title\">\r\n                <div className=\"modal__text__title\">{props.title}</div>\r\n                <div id=\"btnClose\" className=\"modal__close\">\r\n                    <div className=\"modal__close__line\"></div>\r\n                    <div className=\"modal__close__line1\"></div>\r\n                </div>\r\n            </div>\r\n            <div className=\"modal__text\">{props.text}</div>\r\n            <div className=\"modal__footer\"></div>\r\n        </div>\r\n    )\r\n}","import React, {Component} from 'react';\r\nimport Btn from './btn';\r\nimport ModalWindow from './modalWindow';\r\n\r\nexport default class Container extends Component{\r\n\r\n    render(){\r\n        return(\r\n            <div id=\"containerPage\" className=\"container__page\">\r\n                        <div className=\"btn__position\">\r\n                            <Btn text=\"Click\"  />\r\n                        </div>\r\n                        <ModalWindow  title=\"Modal window\" text= \"модалка, ширина и высота модалки зависит от ее содержимого, модалка центрируется в центре экрана стилями\"/>\r\n\r\n                    )\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport Container from './components/container';\r\n\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <section>\r\n        <Container />\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nconst btn = document.getElementById('btnClick');\r\nconst modal = document.getElementById('modal');\r\nconst btnClose = document.getElementById('btnClose');\r\nconst containerPage = document.getElementById('containerPage');\r\n\r\nbtn.addEventListener('click', () => {\r\n    modal.style.display='block';\r\n});\r\n\r\nbtnClose.addEventListener('click', () => {\r\n    modal.style.display='none';\r\n})\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}