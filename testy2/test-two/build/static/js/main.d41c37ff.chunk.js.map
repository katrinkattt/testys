{"version":3,"sources":["components/btn.jsx","components/table.jsx","components/container.jsx","components/footer.jsx","App.js","serviceWorker.js","index.js"],"names":["Btn","props","className","onClick","func","type","id","text","Table","state","people","name","date","count","param","res","this","sort","a","b","setState","scope","sorting","map","score","c","Component","Container","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qOAEe,SAASA,EAAKC,GACzB,OACI,yBAAKC,UAAU,mBACX,4BAAQC,QAASF,EAAMG,KAAMC,KAAK,SAAUC,GAAIL,EAAMK,GAAIJ,UAAU,aAAaD,EAAMM,O,ICD9EC,E,YACjB,WAAYP,GAAO,IAAD,8BACd,4CAAMA,KAELQ,MAAQ,CACLC,OAAQ,CACJ,CACIJ,GAAI,EACJK,KAAM,2BACNC,KAAK,aACLC,MAAO,IAEX,CACIP,GAAI,EACJK,KAAM,2BACNC,KAAK,aACLC,MAAO,IAEX,CACIP,GAAI,EACJK,KAAM,2BACNC,KAAK,yCACLC,MAAO,GAEX,CACIP,GAAI,EACJK,KAAM,yDACNC,KAAM,aACNC,MAAO,GAEX,CACIP,GAAI,EACJK,KAAM,6CACNC,KAAK,aACLC,MAAO,KAEX,CACIP,GAAI,EACJK,KAAM,iCACNC,KAAK,aACLC,MAAO,KAEX,CACIP,GAAI,EACJK,KAAM,yDACNC,KAAK,aACLC,MAAO,IAEX,CACIP,GAAI,EACJK,KAAM,uCACNC,KAAK,aACLC,MAAO,MAnDL,E,qEA4DdC,GACJ,IAEQC,EAFEC,KAAKP,MAAMC,OAEHO,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEJ,GAASK,EAAEL,GAAU,EAAMI,EAAEJ,GAASK,EAAEL,IAAW,EAAI,KACvFE,KAAKI,SAAS,CAACX,MAAQM,M,+BAItB,IAAD,OACJ,OACI,yBAAKb,UAAU,eACX,2BAAOA,UAAU,kCACb,+BACI,4BACI,wBAAImB,MAAM,OAAM,kBAACrB,EAAD,CAAKO,KAAK,KAAKD,GAAG,QAAQF,KAAM,kBAAM,EAAKkB,QAAQ,UACnE,wBAAID,MAAM,OAAM,kBAACrB,EAAD,CAAKO,KAAK,OAAOD,GAAG,UAAWF,KAAM,kBAAM,EAAKkB,QAAQ,YACxE,wBAAID,MAAM,OAAM,kBAACrB,EAAD,CAAKO,KAAK,OAAOD,GAAG,UAAUF,KAAM,kBAAM,EAAKkB,QAAQ,YACvE,wBAAID,MAAM,OAAM,kBAACrB,EAAD,CAAKO,KAAK,QAAQD,GAAG,WAAWF,KAAM,kBAAM,EAAKkB,QAAQ,eAGjF,2BAAOhB,GAAG,aAEFU,KAAKP,MAAMC,OAAOa,KAAI,SAACC,EAAOC,GAAR,OACtB,4BACI,wBAAIJ,MAAM,OAAO,EAAKZ,MAAMC,OAAOe,GAAGnB,IACtC,4BAAK,EAAKG,MAAMC,OAAOe,GAAGd,MAC1B,4BAAK,EAAKF,MAAMC,OAAOe,GAAGb,MAC1B,4BAAK,EAAKH,MAAMC,OAAOe,GAAGZ,kB,GAxFnBa,aCDdC,E,iLAGb,OACI,yBAAKrB,GAAG,gBAAgBJ,UAAU,mBAC9B,kBAAC,EAAD,MADJ,S,GAJ2BwB,aCDxB,SAASE,EAAO3B,GAC3B,OACI,yBAAKC,UAAU,gBACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,gBAAgBD,EAAMM,QCYtCsB,MAbf,WACE,OACE,yBAAK3B,UAAU,OACb,iCACE,kBAAC,EAAD,OAEF,gCACE,kBAAC0B,EAAD,CAAQrB,KAAK,8BCADuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.d41c37ff.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nexport default function Btn (props){\r\n    return(\r\n        <div className=\"btn__sort__main\">\r\n            <button onClick={props.func} type=\"button\"  id={props.id} className=\"btn__sort\">{props.text}</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {Component} from 'react';\r\n\r\nimport Btn from './btn';\r\n\r\nexport default class Table extends Component {\r\n    constructor(props){\r\n        super(props)\r\n\r\n    this.state = {\r\n            people: [\r\n                {\r\n                    id: 1,\r\n                    name: 'Вася',\r\n                    date:'15.06.2018',\r\n                    count: 11\r\n                },\r\n                {\r\n                    id: 2,\r\n                    name: 'Петя',\r\n                    date:'23.11.2018',\r\n                    count: 23\r\n                },\r\n                {\r\n                    id: 3,\r\n                    name: 'Иван',\r\n                    date:'12 марта 2017',\r\n                    count: 3\r\n                },\r\n                {\r\n                    id: 4,\r\n                    name: 'Александр',\r\n                    date: '20/12/2010',\r\n                    count: 1\r\n                },\r\n                {\r\n                    id: 5,\r\n                    name: 'Евгений',\r\n                    date:'12.09.2018',\r\n                    count: 112\r\n                },\r\n                {\r\n                    id: 6,\r\n                    name: 'Мария',\r\n                    date:'01.08.2016',\r\n                    count: 122\r\n                },\r\n                {\r\n                    id: 7,\r\n                    name: 'Анастасия',\r\n                    date:'20.11.2018',\r\n                    count: 34\r\n                },\r\n                {\r\n                    id: 8,\r\n                    name: 'Степан',\r\n                    date:'12.11.2019',\r\n                    count: 10\r\n                },\r\n\r\n        ]\r\n    };\r\n    // this.sorting = this.sorting.bind(this)\r\n\r\n}\r\n\r\nsorting(param){\r\n    var arr = this.state.people;\r\n        // alert(param)\r\n        var res = arr.sort((a, b) => (a[param] > b[param]) ? 1 : ((a[param] < b[param]) ? -1 : 0));\r\n        this.setState({state : res})\r\n}\r\n\r\n\r\nrender(){\r\n    return(\r\n        <div className=\"table__main\">\r\n            <table className=\"table table-striped table-dark\">\r\n                <thead>\r\n                    <tr>\r\n                        <th scope=\"col\"><Btn text='id' id='idBtn' func={() => this.sorting('id')} /></th>\r\n                        <th scope=\"col\"><Btn text='name' id='nameBtn'  func={() => this.sorting('name')}/></th>\r\n                        <th scope=\"col\"><Btn text='date' id='dateBtn' func={() => this.sorting('date')}/></th>\r\n                        <th scope=\"col\"><Btn text='count' id='countBtn' func={() => this.sorting('count')} /></th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody id=\"tableBody\">\r\n                    {\r\n                        this.state.people.map((score, c) =>\r\n                        <tr>\r\n                            <th scope=\"row\">{this.state.people[c].id}</th>\r\n                            <td>{this.state.people[c].name}</td>\r\n                            <td>{this.state.people[c].date}</td>\r\n                            <td>{this.state.people[c].count}</td>\r\n                        </tr>\r\n                        )\r\n                    }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, {Component} from 'react';\r\nimport Table from './table';\r\n\r\nexport default class Container extends Component{\r\n\r\n    render(){\r\n        return(\r\n            <div id=\"containerPage\" className=\"container__page\">\r\n                <Table />\r\n            )\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, {Component} from 'react';\r\n\r\nexport default function Footer(props){\r\n    return(\r\n        <div className=\"footer__main\">\r\n            <div className=\"footer__content\">\r\n                <div className=\"footer__text\">{props.text}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport Container from './components/container';\r\nimport Footer from './components/footer.jsx';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <section>\r\n        <Container />\r\n      </section>\r\n      <footer>\r\n        <Footer text=\"please take me to work\" />\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './bootstrap.css'\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}